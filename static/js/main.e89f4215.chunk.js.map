{"version":3,"sources":["components/invItem.tsx","utils/hooks.tsx","containers/inventory.tsx","slices/saveSlice.tsx","App.tsx","store.tsx","index.tsx"],"names":["InvItem","content","className","useAppSelector","useSelector","Inventory","inventory","state","save","invMax","id","length","map","item","index","saveSlice","createSlice","name","initialState","reducers","addNumber","action","push","payload","changeInvMax","slice","actions","App","dispatch","useDispatch","onClick","Math","floor","random","localStorage","removeItem","persistedState","JSON","parse","getItem","store","configureStore","reducer","saveReducer","preloadedState","subscribe","setItem","stringify","getState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAEaA,EAAU,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,QACxB,OAAO,sBAAMC,UAAU,UAAhB,SAA2BD,K,OCCvBE,EAAkDC,ICAlDC,EAAY,WACvB,IAAMC,EAAYH,GAAe,SAACI,GAAD,OAAWA,EAAMC,KAAKF,aACjDG,EAASN,GAAe,SAACI,GAAD,OAAWA,EAAMC,KAAKC,UAEpD,OACE,sBAAKC,GAAG,YAAR,UACE,qBAAIR,UAAU,QAAd,yBACeI,EAAUK,OADzB,MACoCF,KAEpC,qBAAKC,GAAG,WAAR,SACGJ,EAAUM,KAAI,SAACC,EAAMC,GACpB,OAAO,cAAC,EAAD,CAASb,QAASY,GAAWC,Y,OCHxCC,EAAYC,YAAY,CAC5BC,KAAM,OACNC,aAPmB,CACnBZ,UAAW,CAAC,GACZG,OAAQ,IAMRU,SAAU,CACRC,UADQ,SACEb,EAAOc,GACXd,EAAME,OAASF,EAAMD,UAAUK,QAAQJ,EAAMD,UAAUgB,KAAKD,EAAOE,UAEzEC,aAJQ,SAIKjB,EAAOc,GAClBd,EAAME,OAASY,EAAOE,QACtBhB,EAAMD,UAAYC,EAAMD,UAAUmB,MAAM,EAAGlB,EAAME,YAKxCW,EAAcL,EAAUW,QAAxBN,UAEAL,IAAf,QCHeY,MApBf,WACE,IAAMC,EHH4BC,cGalC,OACE,sBAAK3B,UAAU,MAAf,UACE,cAAC,EAAD,IACA,wBAAQ4B,QAXY,WACtBF,EAASR,EAAUW,KAAKC,MAAsB,GAAhBD,KAAKE,aAUjC,wBACA,wBAAQH,QARc,WACxBI,aAAaC,WAAW,kBAOtB,oCCjBAC,EAAiBC,KAAKC,MAAMJ,aAAaK,QAAQ,kBAAoB,MAErEC,EAAQC,YAAe,CAC3BC,QAAS,CACPlC,KAAMmC,GAERC,eAAgBR,IAGlBI,EAAMK,WAAU,WACdX,aAAaY,QAAQ,gBAAiBT,KAAKU,UAAUP,EAAMQ,gBAM9CR,QCZfS,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJY,SAASC,eAAe,W","file":"static/js/main.e89f4215.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const InvItem = ({ content }: { content: number }) => {\n  return <span className=\"invItem\">{content}</span>;\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\nimport type { RootState, AppDispatch } from \"../store\";\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from \"react\";\nimport { InvItem } from \"../components/invItem\";\nimport { useAppSelector } from \"../utils/hooks\";\n\nexport const Inventory = () => {\n  const inventory = useAppSelector((state) => state.save.inventory);\n  const invMax = useAppSelector((state) => state.save.invMax);\n\n  return (\n    <div id=\"inventory\">\n      <h3 className=\"title\">\n        Inventory - {inventory.length} / {invMax}\n      </h3>\n      <div id=\"invItems\">\n        {inventory.map((item, index) => {\n          return <InvItem content={item} key={index}></InvItem>;\n        })}\n      </div>\n    </div>\n  );\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface ISaveState {\n  inventory: number[];\n  invMax: number;\n}\n\nconst initialState = {\n  inventory: [1],\n  invMax: 20,\n} as ISaveState;\n\nconst saveSlice = createSlice({\n  name: \"save\",\n  initialState,\n  reducers: {\n    addNumber(state, action: PayloadAction<number>) {\n      if (state.invMax > state.inventory.length) state.inventory.push(action.payload);\n    },\n    changeInvMax(state, action: PayloadAction<number>) {\n      state.invMax = action.payload;\n      state.inventory = state.inventory.slice(0, state.invMax);\n    },\n  },\n});\n\nexport const { addNumber } = saveSlice.actions;\n\nexport default saveSlice.reducer;\n","import React from \"react\";\nimport { Inventory } from \"./containers/inventory\";\nimport { addNumber } from \"./slices/saveSlice\";\nimport { useAppDispatch } from \"./utils/hooks\";\n\nfunction App() {\n  const dispatch = useAppDispatch();\n\n  const handleAddNumber = () => {\n    dispatch(addNumber(Math.floor(Math.random() * 20)));\n  };\n\n  const clearLocalStorage = () => {\n    localStorage.removeItem(\"notAMergeGame\");\n  };\n\n  return (\n    <div className=\"App\">\n      <Inventory />\n      <button onClick={handleAddNumber}>add number</button>\n      <button onClick={clearLocalStorage}>reset localStorage</button>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport saveReducer from \"./slices/saveSlice\";\n\nconst persistedState = JSON.parse(localStorage.getItem(\"notAMergeGame\") || \"{}\");\n\nconst store = configureStore({\n  reducer: {\n    save: saveReducer,\n  },\n  preloadedState: persistedState,\n});\n\nstore.subscribe(() => {\n  localStorage.setItem(\"notAMergeGame\", JSON.stringify(store.getState()));\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}